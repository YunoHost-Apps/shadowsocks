#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

password=$YNH_APP_ARG_PASSWORD
in_port="1080"
out_port=$YNH_APP_ARG_OUT_PORT
cipher=$YNH_APP_ARG_CIPHER
ip=get_ip

### If it's a multi-instance app, meaning it can be installed several times independently
### The id of the app as stated in the manifest is available as $YNH_APP_ID
### The instance number is available as $YNH_APP_INSTANCE_NUMBER (equals "1", "2", ...)
### The app instance name is available as $YNH_APP_INSTANCE_NAME
###    - the first time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample
###    - the second time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample__2
###    - ynhexample__{N} for the subsequent installations, with N=3,4, ...
### The app instance name is probably what interests you most, since this is
### guaranteed to be unique. This is a good unique identifier to define installation path,
### db names, ...
app=$YNH_APP_INSTANCE_NAME



#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_print_info "Storing installation settings..."

ynh_app_setting_set $app password $password
ynh_app_setting_set $app cipher $cipher

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_print_info "Configuring firewall..."

### Use these lines if you have to open a port for the application
### `ynh_find_port` will find the first available port starting from the given port.
### If you're not using these lines:
###		- Remove the section "CLOSE A PORT" in the remove script


if [ ${out_port} -ge 1 ] && [ ${out_port} -le 65535 ] && [ ${out_port:0:1} != 0 ]; then
	ynh_print_info "---------------------------"
    ynh_print_info "Port to configure = ${out_port}"
    ynh_print_info "---------------------------"
    else
		ynh_die "Please enter a correct number [1-65535]"
fi
    
done

# Find a free port
port=$(ynh_find_port $out_port)
# Open this port
ynh_exec_warn_less yunohost firewall allow --no-upnp Both $port
ynh_app_setting_set $app port $port

# Find a free internal port
internal_port=$(ynh_find_port $in_port)
# Open this port
ynh_app_setting_set $app internal_port $internal_port

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_print_info "Installing dependencies..."

### `ynh_install_app_dependencies` allows you to add any "apt" dependencies to the package.
### Those deb packages will be installed as dependencies of this package.
### If you're not using this helper:
###		- Remove the section "REMOVE DEPENDENCIES" in the remove script
###		- Remove the variable "pkg_dependencies" in _common.sh
###		- As well as the section "REINSTALL DEPENDENCIES" in the restore script
###		- And the section "UPGRADE DEPENDENCIES" in the upgrade script

ynh_install_app_dependencies $pkg_dependencies



#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_print_info "Setting up source files..."

### `ynh_setup_source` is used to install an app from a zip or tar.gz file,
### downloaded from an upstream source, like a git repository.
### `ynh_setup_source` use the file conf/app.src

tmpdir="$(ynh_smart_mktemp 300)"

ynh_print_info "Extracting libsodium sorces into temp directory for installation..."
# Download, check integrity, uncompress and patch the source from libsodium.src
ynh_setup_source "${tmpdir}/${libsodium_file}" "libsodium"

ynh_print_info "Extracting shadowsocks sorces into temp directory for installation..."
# Download, check integrity, uncompress and patch the source from shadowsocks.src
ynh_setup_source "${tmpdir}/shadowsocks" "shadowsocks"



#=================================================
# SPECIFIC SETUP
#=================================================

# Install Shadowsocks

    # Install libsodium
    if [ ! -f /usr/lib/libsodium.a ]; then
       (
       cd ${tmpdir}/${libsodium_file}
       ./configure --prefix=/usr && make && make install
       )
       else
		ynh_die "libsodium install failed!"
        
    fi

    # Install Shadowsocks
    (
    cd ${tmpdir}/shadowsocks
    python setup.py install --record /usr/local/shadowsocks_install.log
    )
    if [ -f /usr/bin/ssserver ] || [ -f /usr/local/bin/ssserver ]; then
        chmod +x /etc/init.d/shadowsocks
        update-rc.d -f shadowsocks defaults
        cp -f "../conf/shadowsocks.json" "/etc/."
        cp -f "../conf/shadowsocks" "/etc/init.d/."
        #=================================================
		# MODIFY A CONFIG FILE
		#=================================================

		### `ynh_replace_string` is used to replace a string in a file.
		### (It's compatible with sed regular expressions syntax)

		ynh_replace_string "__PORT__"          "$port"          "/etc/shadowsocks.json"
		ynh_replace_string "__INTERNAL_PORT__" "$internal_port" "/etc/shadowsocks.json"
		ynh_replace_string "__PASSWORD__"      "$password"      "/etc/shadowsocks.json"
		ynh_replace_string "__CIPHER__"        "$cipher"        "/etc/shadowsocks.json"
    else
        ynh_die "Shadowsocks install failed! please open an issue here https://github.com/YunoHost-Apps/shadowsocks_ynh/issues"
fi

sudo rm -Rf "$tmpdir"

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

### `ynh_store_file_checksum` is used to store the checksum of a file.
### That way, during the upgrade script, by using `ynh_backup_if_checksum_is_different`,
### you can make a backup of this file before modifying it again if the admin had modified it.

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum "/etc/shadowsocks.json"



#=================================================
# Start Shadosocks
#=================================================
ynh_print_info "Start Shadowsocks server..."

/etc/init.d/shadowsocks start

#=================================================
# SEND A README FOR THE ADMIN
#=================================================

message=" $app server was successfully installed :)

Your Server IP: $ip
Your Server Port: $port
Your Password: $password
Your Encryption Method: $cipher
If you are facing any problem or want to improve this app, please open a new issue here: https://github.com/YunoHost-Apps/shadowsocks_ynh/issues"

ynh_send_readme_to_admin "$message"

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info "Installation of $app completed"
